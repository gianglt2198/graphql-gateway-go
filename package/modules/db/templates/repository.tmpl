
{{ define "repository" }}
{{ with $.Header }}{{ . }}{{ else }}// Code generated by ent, DO NOT EDIT.{{ end }}
{{ $pkg := base $.Config.Package }}
package {{ $pkg }}

{{ $n := . }}
{{- $name := $n.Name -}}
{{- $nameLower := $n.Name | lower -}}
{{- $receiver := $n.Receiver -}}

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/samber/lo"

	"{{ $.Config.Package }}/predicate"
	"github.com/gianglt2198/federation-go/package/infras/monitoring"
	"github.com/gianglt2198/federation-go/package/utils"
)

type (
	// {{ $nameLower }}Repository implements {{ $name }}Repository
	{{ $nameLower }}Repository struct {
		log *monitoring.Logger
		db  *Client
	}

	// {{ $name }}Repository defines the interface for {{ $name }} repository operations
	{{ $name }}Repository interface {
		Client(ctx context.Context) *Client
		CreateOne(ctx context.Context, input Create{{ $name }}Input) (*{{ $name }}, error)
		CreateBulk(ctx context.Context, inputs []Create{{ $name }}Input) ([]*{{ $name }}, error)
		DeleteOne(ctx context.Context, id string, input *Update{{ $name }}Input) error
		DeleteWithPredicates(ctx context.Context, predicates ...predicate.{{ $name }}) (int, error)
		FindAllWithPredicates(ctx context.Context, qs *{{ $name }}Query, predicates ...predicate.{{ $name }}) ([]*{{ $name }}, error)
		FindOneWithPredicates(ctx context.Context, qs *{{ $name }}Query, predicates ...predicate.{{ $name }}) (*{{ $name }}, error)
		Query(ctx context.Context) *{{ $name }}Query
		UpdateOne(ctx context.Context, id string, input Update{{ $name }}Input) (*{{ $name }}, error)
		UpdateWithPredicates(ctx context.Context, input Update{{ $name }}Input, predicates ...predicate.{{ $name }}) (int, error)
		WithCollectFields(ctx context.Context) *{{ $name }}Query
	}
)

// New{{ $name }}Repository creates a new {{ $name }} repository
func New{{ $name }}Repository(log *monitoring.Logger, db *Client) {{ $name }}Repository {
	return &{{ $nameLower }}Repository{
		log: log,
		db:  db,
	}
}

// Client returns the database client, with transaction support
func ({{ $receiver }} *{{ $nameLower }}Repository) Client(ctx context.Context) *Client {
	return {{ $receiver }}.db
}

// Query returns a new query builder for {{ $name }}
func ({{ $receiver }} *{{ $nameLower }}Repository) Query(ctx context.Context) *{{ $name }}Query {
	return {{ $receiver }}.Client(ctx).{{ $name }}.Query()
}

// WithCollectFields returns a query with GraphQL field collection
func ({{ $receiver }} *{{ $nameLower }}Repository) WithCollectFields(ctx context.Context) *{{ $name }}Query {
	qs := {{ $receiver }}.Query(ctx)
	if !graphql.HasOperationContext(ctx) {
		return qs
	}
	opCtx := graphql.GetOperationContext(ctx)
	if opCtx == nil || opCtx.Operation == nil {
		return qs
	}
	newQS, err := qs.CollectFields(ctx)
	if err != nil {
		log.Printf("CollectFields reflect failed: %v", err)
		return qs
	}
	return newQS
}

// CreateOne creates a single {{ $name }} entity
func ({{ $receiver }} *{{ $nameLower }}Repository) CreateOne(ctx context.Context, input Create{{ $name }}Input) (*{{ $name }}, error) {
	return {{ $receiver }}.Client(ctx).{{ $name }}.Create().SetInput(input).Save(ctx)
}

// CreateBulk creates multiple {{ $name }} entities
func ({{ $receiver }} *{{ $nameLower }}Repository) CreateBulk(ctx context.Context, inputs []Create{{ $name }}Input) ([]*{{ $name }}, error) {
	client := {{ $receiver }}.Client(ctx)
	builders := lo.Map(inputs, func(input Create{{ $name }}Input, _ int) *{{ $name }}Create {
		return client.{{ $name }}.Create().SetInput(input)
	})
	return client.{{ $name }}.CreateBulk(builders...).Save(ctx)
}

// UpdateOne updates a single {{ $name }} entity by ID
func ({{ $receiver }} *{{ $nameLower }}Repository) UpdateOne(ctx context.Context, id string, input Update{{ $name }}Input) (*{{ $name }}, error) {
	return {{ $receiver }}.Client(ctx).{{ $name }}.UpdateOneID(id).SetInput(input).Save(ctx)
}

// UpdateWithPredicates updates {{ $name }} entities matching the given predicates
func ({{ $receiver }} *{{ $nameLower }}Repository) UpdateWithPredicates(ctx context.Context, input Update{{ $name }}Input, predicates ...predicate.{{ $name }}) (int, error) {
	return {{ $receiver }}.Client(ctx).{{ $name }}.Update().Where(predicates...).SetInput(input).Save(ctx)
}

// DeleteOne deletes a single {{ $name }} entity by ID (soft delete if supported)
func ({{ $receiver }} *{{ $nameLower }}Repository) DeleteOne(ctx context.Context, id string, input *Update{{ $name }}Input) error {
	if input != nil {
		updateOne := {{ $receiver }}.Client(ctx).{{ $name }}.UpdateOneID(id)
		if row, ok := any(updateOne).(interface {
			SetDeletedAt(t time.Time) *{{ $name }}UpdateOne
			SetDeletedBy(s string) *{{ $name }}UpdateOne
		}); ok {
			updateOne = row.SetDeletedAt(time.Now())
			if userID := utils.GetUserIDFromCtx(ctx); userID != "" {
				updateOne = row.SetDeletedBy(userID)
			}
		}
		_, err := updateOne.SetInput(lo.FromPtr(input)).Save(ctx)
		return err
	}
	return {{ $receiver }}.Client(ctx).{{ $name }}.DeleteOneID(id).Exec(ctx)
}

// DeleteWithPredicates deletes {{ $name }} entities matching the given predicates
func ({{ $receiver }} *{{ $nameLower }}Repository) DeleteWithPredicates(ctx context.Context, predicates ...predicate.{{ $name }}) (int, error) {
	return {{ $receiver }}.Client(ctx).{{ $name }}.Delete().Where(predicates...).Exec(ctx)
}

// FindAllWithPredicates finds all {{ $name }} entities matching the given predicates
func ({{ $receiver }} *{{ $nameLower }}Repository) FindAllWithPredicates(
	ctx context.Context,
	qs *{{ $name }}Query,
	predicates ...predicate.{{ $name }},
) ([]*{{ $name }}, error) {
	if qs == nil {
		qs = {{ $receiver }}.Query(ctx)
	}
	qs = qs.Where(predicates...)
	result, err := qs.All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to run All(): %w", err)
	}
	return result, nil
}

// FindOneWithPredicates finds the first {{ $name }} entity matching the given predicates
func ({{ $receiver }} *{{ $nameLower }}Repository) FindOneWithPredicates(
	ctx context.Context,
	qs *{{ $name }}Query,
	predicates ...predicate.{{ $name }},
) (*{{ $name }}, error) {
	if qs == nil {
		qs = {{ $receiver }}.Query(ctx)
	}
	qs = qs.Where(predicates...)
	result, err := qs.First(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to run First(): %w", err)
	}
	return result, nil
}

{{ end }}