version: "3.8"

services:
  # NATS Messaging Server
  nats:
    image: nats:2.11-alpine
    ports:
      - "4223:4222" # Client connections
      - "8223:8222" # HTTP monitoring
      - "6223:6222" # Routing port for clustering
    command: ["--store_dir=/data"]
    volumes:
      - nats_data:/data
    networks:
      - federation-network

  # PostgreSQL for Account Service
  db:
    image: postgres:17.5-alpine3.21
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=username
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - federation-network

  # Redis Cache
  redis:
    image: redis:8-alpine
    ports:
      - "16379:6379"
    volumes:
      - redis_data:/data
    networks:
      - federation-network

  ############### MONITORING ###############

  ## PROMETHEUS
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    networks:
      - federation-network
    volumes:
      - ./deployments/configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5

  ## TEMPO
  memcached:
    image: memcached:1.6.29
    container_name: memcached
    networks:
      - federation-network
    ports:
      - "11211:11211"
    environment:
      - MEMCACHED_MAX_MEMORY=64m # Set the maximum memory usage
      - MEMCACHED_THREADS=4 # Number of threads to use

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: ["-config.file=/etc/tempo.yaml"]
    networks:
      - federation-network
    volumes:
      - ./deployments/configs/tempo.yaml:/etc/tempo.yaml
      - tempo_data:/var/tempo
    ports:
      - "3200:3200" # tempo
    user: root
    depends_on:
      - memcached

  ## LOKI
  loki:
    image: grafana/loki:latest
    container_name: loki
    command: -config.file=/etc/loki/loki.config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ./deployments/configs/loki.yaml:/etc/loki/loki.config.yaml
      - loki_data:/data/loki
    networks:
      - federation-network
    privileged: true
    user: root
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -q --tries=1 -O - http://localhost:3100/ready | grep -q -w ready || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  ## VECTOR
  vector:
    image: timberio/vector:latest-alpine
    container_name: vector
    volumes:
      - ./deployments/configs/vector.yaml:/etc/vector/vector.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro # Required for docker_logs source
    ports:
      - "9598:9598" # Prometheus metrics endpoint
    networks:
      - federation-network
    depends_on:
      - loki

  ## COLLECTOR
  collector:
    image: otel/opentelemetry-collector:latest
    container_name: collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./deployments/configs/otlp.yaml:/etc/otel-collector-config.yaml
    ports:
      - "13133:13133" # health_check extension
      - "55679:55679" # zpages extension
      - "1888:1888" # pprof extension
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
    networks:
      - federation-network
    depends_on:
      - tempo
      - prometheus

  ## GRAFANA
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=123
    networks:
      - federation-network
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  nats_data:
  postgres_data:
  redis_data:
  prometheus_data:
  loki_data:
  tempo_data:
  grafana_data:

networks:
  federation-network:
    driver: bridge
